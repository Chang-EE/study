{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMxz5xv9gzWfmfcvbiKTtFc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","\n","class LinearRegressionGD:\n","    def __init__(self, fit_intercept=True, copy_X=True,\n","                 eta0=0.001, epochs=1000, batch_size=1,\n","                 weight_decay=0.9, shuffle=True):\n","        self.fit_intercept = fit_intercept  # intercept 여부\n","        self.copy_X = copy_X  # 데이터를 복사할지 여부\n","        self._eta0 = eta0  # 초기 학습률\n","        self._epochs = epochs  # 학습할 epoch 수\n","\n","        self._cost_history = []  # 비용 기록을 위한 리스트\n","        self._coef = None  # 회귀 계수\n","        self._intercept = None  # 절편\n","        self._new_X = None  # 데이터를 저장할 변수\n","        self._w_history = None  # 가중치 업데이트 기록\n","        self._weight_decay = weight_decay  # 학습률 감소율\n","        self._batch_size = batch_size  # 배치 크기\n","        self._is_SGD = shuffle  # 데이터를 섞을지 여부\n","\n","    def gradient(self, X, y, theta):\n","        # 경사하강법을 위한 기울기 계산\n","        return ######## 코드 작성 ##########\n","\n","    def fit(self, X, y):\n","        # 학습을 시작하는 함수\n","        self._new_X = np.array(X)  # X 데이터를 numpy 배열로 변환하여 저장\n","        y = y.reshape(-1, 1)  # y 데이터를 열 벡터로 변환\n","        if self.fit_intercept:  # intercept 추가 여부 확인\n","            intercept_vector = ######## 코드 작성 ##########  # 1로만 구성된 벡터\n","            self._new_X = np.concatenate((intercept_vector, self._new_X), axis=1)  # X에 상수항 추가\n","\n","        theta_init = np.random.normal(0, 1, self._new_X.shape[1])  # 초기 theta 값 설정 (정규분포)\n","        self._w_history = [theta_init]  # 가중치 기록 초기화\n","        self._cost_history = [self.cost(self.hypothesis_function(self._new_X, theta_init), y)]  # 비용 기록 초기화\n","\n","        theta = theta_init  # 초기 theta로 시작\n","\n","        for epoch in range(self._epochs):  # 지정된 epoch 횟수만큼 학습 실행\n","            X_copy, y_copy = np.copy(self._new_X), np.copy(y)  # X와 y를 복사하여 수정하지 않도록 함\n","\n","            if self._is_SGD:  # SGD(확률적 경사 하강법) 적용 여부\n","                indices = np.arange(len(X_copy))  # X_copy의 인덱스 생성\n","                ######## 코드 작성 ##########  # 인덱스를 무작위로 섞음\n","                X_copy, y_copy = X_copy[indices], y_copy[indices]  # X와 y를 섞은 인덱스로 재배치\n","\n","            num_batches = len(X_copy) // self._batch_size  # 배치의 개수 계산\n","\n","            for batch_count in range(num_batches):  # 배치마다 학습 실행\n","                start = ######## 코드 작성 ##########  # 배치의 시작 인덱스\n","                end = ######## 코드 작성 ##########  # 배치의 끝 인덱스\n","\n","                X_batch = X_copy[start:end]  # 배치 크기에 맞는 X 데이터 추출\n","                y_batch = y_copy[start:end]  # 배치 크기에 맞는 y 데이터 추출\n","\n","                gradient = self.gradient(X_batch, y_batch, theta).flatten()  # 배치에 대한 기울기 계산\n","                theta = theta - self._eta0 * gradient  # 경사하강법으로 theta 업데이트\n","\n","            if epoch % 100 == 0:  # 100번째 epoch마다 가중치 기록과 비용 기록 추가\n","                self._w_history.append(theta)\n","                cost = self.cost(self.hypothesis_function(self._new_X, theta), y)  # 현재 모델의 비용 계산\n","                self._cost_history.append(cost)  # 비용 기록에 추가\n","\n","            self._eta0 *= self._weight_decay  # 학습률을 weight_decay 비율로 감소시킴\n","\n","        if self.fit_intercept:  # intercept이 존재하면 분리하여 저장\n","            self._intercept = theta[0]\n","            self._coef = theta[1:]\n","        else:  # intercept이 없으면 theta 그대로 사용\n","            self._coef = theta\n","\n","    def cost(self, h, y):\n","        # 비용 함수 계산 (평균 제곱 오차)\n","        return 1 / (2 * len(y)) * np.sum((h - y).flatten() ** 2)\n","\n","    def hypothesis_function(self, X, theta):\n","        # 예측 함수 (모델의 가설)\n","        return X.dot(theta).reshape(-1, 1)\n","\n","    def predict(self, X):\n","        # 주어진 X에 대해 예측을 수행하는 함수\n","        test_X = np.array(X)\n","\n","        if self.fit_intercept:  # intercept 추가 여부 확인\n","            intercept_vector = np.ones([len(test_X), 1])  # 1로만 구성된 벡터\n","            test_X = np.concatenate((intercept_vector, test_X), axis=1)  # X에 상수항 추가\n","            weights = np.concatenate(([self._intercept], self._coef), axis=0)  # weights에 intercept와 coef 결합\n","        else:\n","            weights = self._coef  # intercept 없이 coef만 사용\n","\n","        return ######## 코드 작성 ##########  # 예측값 계산\n","\n","    @property\n","    def coef(self):\n","        # 회귀 계수를 반환하는 프로퍼티\n","        return self._coef\n","\n","    @property\n","    def intercept(self):\n","        # 절편을 반환하는 프로퍼티\n","        return self._intercept\n","\n","    @property\n","    def weights_history(self):\n","        # 가중치 업데이트 기록을 반환하는 프로퍼티\n","        return np.array(self._w_history)\n","\n","    @property\n","    def cost_history(self):\n","        # 비용 기록을 반환하는 프로퍼티\n","        return self._cost_history"],"metadata":{"id":"Xy1wEXW6JBIm","colab":{"base_uri":"https://localhost:8080/","height":114},"executionInfo":{"status":"error","timestamp":1742949097543,"user_tz":-540,"elapsed":58,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"df3176fe-ec54-4f4e-8b0d-0b344ddc32f1"},"execution_count":4,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-4-de5c08beba7e>, line 30)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-de5c08beba7e>\"\u001b[0;36m, line \u001b[0;32m30\u001b[0m\n\u001b[0;31m    intercept_vector = ######## 코드 작성 ##########  # 1로만 구성된 벡터\u001b[0m\n\u001b[0m                       ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","source":["!wget https://raw.githubusercontent.com/dankook-sw/DataMining/refs/heads/main/ch08/train.csv"],"metadata":{"id":"Ha6sqn42KPrj","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742949078490,"user_tz":-540,"elapsed":475,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"21e7e546-0392-45f5-dde4-0e217669a484"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["--2025-03-26 00:31:17--  https://raw.githubusercontent.com/dankook-sw/DataMining/refs/heads/main/ch08/train.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 11087 (11K) [text/plain]\n","Saving to: ‘train.csv’\n","\n","train.csv           100%[===================>]  10.83K  --.-KB/s    in 0s      \n","\n","2025-03-26 00:31:18 (34.2 MB/s) - ‘train.csv’ saved [11087/11087]\n","\n"]}]},{"cell_type":"code","source":["!wget https://raw.githubusercontent.com/dankook-sw/DataMining/refs/heads/main/ch08/test.csv"],"metadata":{"id":"nNaDGxrlKTTu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742949082702,"user_tz":-540,"elapsed":335,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"46dabdba-0e3d-422b-973d-35356144af35"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["--2025-03-26 00:31:22--  https://raw.githubusercontent.com/dankook-sw/DataMining/refs/heads/main/ch08/test.csv\n","Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n","Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 4761 (4.6K) [text/plain]\n","Saving to: ‘test.csv’\n","\n","test.csv            100%[===================>]   4.65K  --.-KB/s    in 0s      \n","\n","2025-03-26 00:31:22 (45.8 MB/s) - ‘test.csv’ saved [4761/4761]\n","\n"]}]},{"cell_type":"code","source":["!ls /content/"],"metadata":{"id":"aifUvom4KVbk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1742949085616,"user_tz":-540,"elapsed":246,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"fcfb77f1-6124-42f2-ec90-b90bce4c950d"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["sample_data  test.csv  train.csv\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","df = pd.read_csv(\"/content/train.csv\")\n","\n","X = df[\"x\"].values.reshape(-1,1)\n","y = df[\"y\"].values\n","\n","epoch = 200\n","eta = 0.00001\n","gd_lr = LinearRegressionGD(eta0=eta, epochs=epoch, batch_size=1, shuffle=False)\n","bgd_lr = LinearRegressionGD(eta0=eta, epochs=epoch, batch_size=len(X), shuffle=False)\n","sgd_lr = LinearRegressionGD(eta0=eta, epochs=epoch, batch_size=1, shuffle=True)\n","msgd_lr = LinearRegressionGD(eta0=eta, epochs=epoch, batch_size=20, shuffle=True)"],"metadata":{"id":"zRIobC8aKYIv","executionInfo":{"status":"ok","timestamp":1742952258779,"user_tz":-540,"elapsed":46,"user":{"displayName":"이창수","userId":"02759287954653446121"}}},"execution_count":38,"outputs":[]},{"cell_type":"code","source":["gd_lr.fit(X, y)\n","bgd_lr.fit(X, y)\n","sgd_lr.fit(X, y)\n","msgd_lr.fit(X, y)"],"metadata":{"id":"BR7bviqSKbLC","executionInfo":{"status":"ok","timestamp":1742952263962,"user_tz":-540,"elapsed":3214,"user":{"displayName":"이창수","userId":"02759287954653446121"}}},"execution_count":39,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","\n","plt.subplot(2,2,1)\n","plt.plot(range(len(gd_lr.cost_history)), gd_lr.cost_history, c=\"r\")\n","plt.subplot(2,2,2)\n","plt.plot(range(len(bgd_lr.cost_history)), bgd_lr.cost_history, c=\"y\")\n","plt.subplot(2,2,3)\n","plt.plot(range(len(sgd_lr.cost_history)), sgd_lr.cost_history, c=\"g\")\n","plt.subplot(2,2,4)\n","plt.plot(range(len(msgd_lr.cost_history)), msgd_lr.cost_history, c=\"b\")"],"metadata":{"id":"2LJHgsVzKgnZ","colab":{"base_uri":"https://localhost:8080/","height":464},"executionInfo":{"status":"ok","timestamp":1742952266689,"user_tz":-540,"elapsed":344,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"860d2dd6-79c7-4939-ecbe-29ced0fc51af"},"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7ea9528f5c90>]"]},"metadata":{},"execution_count":40},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 4 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","\n","class LinearRegressionGD:\n","    def __init__(self, fit_intercept=True, copy_X=True,\n","                 eta0=0.001, epochs=1000, batch_size=1,\n","                 weight_decay=0.9, shuffle=True):\n","        self.fit_intercept = fit_intercept  # intercept 여부\n","        self.copy_X = copy_X  # 데이터를 복사할지 여부\n","        self._eta0 = eta0  # 초기 학습률\n","        self._epochs = epochs  # 학습할 epoch 수\n","\n","        self._cost_history = []  # 비용 기록을 위한 리스트\n","        self._coef = None  # 회귀 계수\n","        self._intercept = None  # 절편\n","        self._new_X = None  # 데이터를 저장할 변수\n","        self._w_history = None  # 가중치 업데이트 기록\n","        self._weight_decay = weight_decay  # 학습률 감소율\n","        self._batch_size = batch_size  # 배치 크기\n","        self._is_SGD = shuffle  # 데이터를 섞을지 여부\n","\n","    def gradient(self, X, y, theta):\n","        # 경사하강법을 위한 기울기 계산\n","        return X.T@(self.hypothesis_function(X, theta)-y/len(X)) ######## 코드 작성 ##########\n","\n","    def fit(self, X, y):\n","        # 학습을 시작하는 함수\n","        self._new_X = np.array(X)  # X 데이터를 numpy 배열로 변환하여 저장\n","        y = y.reshape(-1, 1)  # y 데이터를 열 벡터로 변환\n","        if self.fit_intercept:  # intercept 추가 여부 확인\n","            intercept_vector = np.ones([len(self._new_X), 1])  ######## 코드 작성 ##########  # 1로만 구성된 벡터\n","            self._new_X = np.concatenate((intercept_vector, self._new_X), axis=1)  # X에 상수항 추가\n","\n","        theta_init = np.random.normal(0, 1, self._new_X.shape[1])  # 초기 theta 값 설정 (정규분포)\n","        self._w_history = [theta_init]  # 가중치 기록 초기화\n","        self._cost_history = [self.cost(self.hypothesis_function(self._new_X, theta_init), y)]  # 비용 기록 초기화\n","\n","        theta = theta_init  # 초기 theta로 시작\n","\n","        for epoch in range(self._epochs):  # 지정된 epoch 횟수만큼 학습 실행\n","            X_copy, y_copy = np.copy(self._new_X), np.copy(y)  # X와 y를 복사하여 수정하지 않도록 함\n","\n","            if self._is_SGD:  # SGD(확률적 경사 하강법) 적용 여부\n","                indices = np.arange(len(X_copy))  # X_copy의 인덱스 생성\n","                np.random.shuffle(indices)  ######## 코드 작성 ##########  # 인덱스를 무작위로 섞음\n","                X_copy, y_copy = X_copy[indices], y_copy[indices]  # X와 y를 섞은 인덱스로 재배치\n","\n","            num_batches = len(X_copy) // self._batch_size  # 배치의 개수 계산\n","\n","            for batch_count in range(num_batches):  # 배치마다 학습 실행\n","                start = batch_count*self._batch_size ######## 코드 작성 ##########  # 배치의 시작 인덱스\n","                end = start + self._batch_size ######## 코드 작성 ##########  # 배치의 끝 인덱스\n","\n","                X_batch = X_copy[start:end]  # 배치 크기에 맞는 X 데이터 추출\n","                y_batch = y_copy[start:end]  # 배치 크기에 맞는 y 데이터 추출\n","\n","                gradient = self.gradient(X_batch, y_batch, theta).flatten()  # 배치에 대한 기울기 계산\n","                theta = theta - self._eta0 * gradient  # 경사하강법으로 theta 업데이트\n","\n","            if epoch % 100 == 0:  # 100번째 epoch마다 가중치 기록과 비용 기록 추가\n","                self._w_history.append(theta)\n","                cost = self.cost(self.hypothesis_function(self._new_X, theta), y)  # 현재 모델의 비용 계산\n","                self._cost_history.append(cost)  # 비용 기록에 추가\n","\n","            self._eta0 *= self._weight_decay  # 학습률을 weight_decay 비율로 감소시킴\n","\n","        if self.fit_intercept:  # intercept이 존재하면 분리하여 저장\n","            self._intercept = theta[0]\n","            self._coef = theta[1:]\n","        else:  # intercept이 없으면 theta 그대로 사용\n","            self._coef = theta\n","\n","    def cost(self, h, y):\n","        # 비용 함수 계산 (평균 제곱 오차)\n","        return 1 / (2 * len(y)) * np.sum((h - y).flatten() ** 2)\n","\n","    def hypothesis_function(self, X, theta):\n","        # 예측 함수 (모델의 가설)\n","        return X.dot(theta).reshape(-1, 1)\n","\n","    def predict(self, X):\n","        # 주어진 X에 대해 예측을 수행하는 함수\n","        test_X = np.array(X)\n","\n","        if self.fit_intercept:  # intercept 추가 여부 확인\n","            intercept_vector = np.ones([len(test_X), 1])  # 1로만 구성된 벡터\n","            test_X = np.concatenate((intercept_vector, test_X), axis=1)  # X에 상수항 추가\n","            weights = np.concatenate(([self._intercept], self._coef), axis=0)  # weights에 intercept와 coef 결합\n","        else:\n","            weights = self._coef  # intercept 없이 coef만 사용\n","\n","        return test_X@weights ######## 코드 작성 ##########  # 예측값 계산\n","\n","    @property\n","    def coef(self):\n","        # 회귀 계수를 반환하는 프로퍼티\n","        return self._coef\n","\n","    @property\n","    def intercept(self):\n","        # 절편을 반환하는 프로퍼티\n","        return self._intercept\n","\n","    @property\n","    def weights_history(self):\n","        # 가중치 업데이트 기록을 반환하는 프로퍼티\n","        return np.array(self._w_history)\n","\n","    @property\n","    def cost_history(self):\n","        # 비용 기록을 반환하는 프로퍼티\n","        return self._cost_history"],"metadata":{"id":"BOnXtehA7YlY","executionInfo":{"status":"ok","timestamp":1742951761931,"user_tz":-540,"elapsed":93,"user":{"displayName":"이창수","userId":"02759287954653446121"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["len(X)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fZDvOs4iBzxQ","executionInfo":{"status":"ok","timestamp":1742951913325,"user_tz":-540,"elapsed":51,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"97a87820-a0e0-4c95-83d4-e9d7cb4ba6c7"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["700"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["import pandas as pd\n","\n","data_url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/housing/housing.data'\n","df_data = pd.read_csv(data_url, sep='\\s+', header=None)\n","df_data.columns = ['CRIM','ZN','INDUS','CHAS','NOX','RM','AGE','DIS','RAD','TAX','PTRATIO','B','LSTAT','MEDV']\n","df_data.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":226},"id":"vIvjwmtaIt-N","executionInfo":{"status":"ok","timestamp":1742953703612,"user_tz":-540,"elapsed":465,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"8f9cfc45-e59e-4a9c-8445-ef44e4083057"},"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      CRIM    ZN  INDUS  CHAS    NOX     RM   AGE     DIS  RAD    TAX  \\\n","0  0.00632  18.0   2.31     0  0.538  6.575  65.2  4.0900    1  296.0   \n","1  0.02731   0.0   7.07     0  0.469  6.421  78.9  4.9671    2  242.0   \n","2  0.02729   0.0   7.07     0  0.469  7.185  61.1  4.9671    2  242.0   \n","3  0.03237   0.0   2.18     0  0.458  6.998  45.8  6.0622    3  222.0   \n","4  0.06905   0.0   2.18     0  0.458  7.147  54.2  6.0622    3  222.0   \n","\n","   PTRATIO       B  LSTAT  MEDV  \n","0     15.3  396.90   4.98  24.0  \n","1     17.8  396.90   9.14  21.6  \n","2     17.8  392.83   4.03  34.7  \n","3     18.7  394.63   2.94  33.4  \n","4     18.7  396.90   5.33  36.2  "],"text/html":["\n","  <div id=\"df-f88aa3bc-da6b-4488-b7ef-653704862e18\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>CRIM</th>\n","      <th>ZN</th>\n","      <th>INDUS</th>\n","      <th>CHAS</th>\n","      <th>NOX</th>\n","      <th>RM</th>\n","      <th>AGE</th>\n","      <th>DIS</th>\n","      <th>RAD</th>\n","      <th>TAX</th>\n","      <th>PTRATIO</th>\n","      <th>B</th>\n","      <th>LSTAT</th>\n","      <th>MEDV</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.00632</td>\n","      <td>18.0</td>\n","      <td>2.31</td>\n","      <td>0</td>\n","      <td>0.538</td>\n","      <td>6.575</td>\n","      <td>65.2</td>\n","      <td>4.0900</td>\n","      <td>1</td>\n","      <td>296.0</td>\n","      <td>15.3</td>\n","      <td>396.90</td>\n","      <td>4.98</td>\n","      <td>24.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.02731</td>\n","      <td>0.0</td>\n","      <td>7.07</td>\n","      <td>0</td>\n","      <td>0.469</td>\n","      <td>6.421</td>\n","      <td>78.9</td>\n","      <td>4.9671</td>\n","      <td>2</td>\n","      <td>242.0</td>\n","      <td>17.8</td>\n","      <td>396.90</td>\n","      <td>9.14</td>\n","      <td>21.6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.02729</td>\n","      <td>0.0</td>\n","      <td>7.07</td>\n","      <td>0</td>\n","      <td>0.469</td>\n","      <td>7.185</td>\n","      <td>61.1</td>\n","      <td>4.9671</td>\n","      <td>2</td>\n","      <td>242.0</td>\n","      <td>17.8</td>\n","      <td>392.83</td>\n","      <td>4.03</td>\n","      <td>34.7</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.03237</td>\n","      <td>0.0</td>\n","      <td>2.18</td>\n","      <td>0</td>\n","      <td>0.458</td>\n","      <td>6.998</td>\n","      <td>45.8</td>\n","      <td>6.0622</td>\n","      <td>3</td>\n","      <td>222.0</td>\n","      <td>18.7</td>\n","      <td>394.63</td>\n","      <td>2.94</td>\n","      <td>33.4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.06905</td>\n","      <td>0.0</td>\n","      <td>2.18</td>\n","      <td>0</td>\n","      <td>0.458</td>\n","      <td>7.147</td>\n","      <td>54.2</td>\n","      <td>6.0622</td>\n","      <td>3</td>\n","      <td>222.0</td>\n","      <td>18.7</td>\n","      <td>396.90</td>\n","      <td>5.33</td>\n","      <td>36.2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f88aa3bc-da6b-4488-b7ef-653704862e18')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f88aa3bc-da6b-4488-b7ef-653704862e18 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f88aa3bc-da6b-4488-b7ef-653704862e18');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8608e8d7-c54f-4ef9-a6a4-2f27daecf688\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8608e8d7-c54f-4ef9-a6a4-2f27daecf688')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8608e8d7-c54f-4ef9-a6a4-2f27daecf688 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_data","summary":"{\n  \"name\": \"df_data\",\n  \"rows\": 506,\n  \"fields\": [\n    {\n      \"column\": \"CRIM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8.601545105332487,\n        \"min\": 0.00632,\n        \"max\": 88.9762,\n        \"num_unique_values\": 504,\n        \"samples\": [\n          0.09178,\n          0.05644,\n          0.10574\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ZN\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.322452994515036,\n        \"min\": 0.0,\n        \"max\": 100.0,\n        \"num_unique_values\": 26,\n        \"samples\": [\n          25.0,\n          30.0,\n          18.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDUS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.8603529408975845,\n        \"min\": 0.46,\n        \"max\": 27.74,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          8.14,\n          1.47,\n          1.22\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CHAS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NOX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11587767566755611,\n        \"min\": 0.385,\n        \"max\": 0.871,\n        \"num_unique_values\": 81,\n        \"samples\": [\n          0.401,\n          0.538\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RM\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.7026171434153237,\n        \"min\": 3.561,\n        \"max\": 8.78,\n        \"num_unique_values\": 446,\n        \"samples\": [\n          6.849,\n          4.88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AGE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.148861406903638,\n        \"min\": 2.9,\n        \"max\": 100.0,\n        \"num_unique_values\": 356,\n        \"samples\": [\n          51.8,\n          33.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DIS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1057101266276104,\n        \"min\": 1.1296,\n        \"max\": 12.1265,\n        \"num_unique_values\": 412,\n        \"samples\": [\n          2.2955,\n          4.2515\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RAD\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 1,\n        \"max\": 24,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TAX\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 168.53711605495926,\n        \"min\": 187.0,\n        \"max\": 711.0,\n        \"num_unique_values\": 66,\n        \"samples\": [\n          370.0,\n          666.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PTRATIO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.164945523714446,\n        \"min\": 12.6,\n        \"max\": 22.0,\n        \"num_unique_values\": 46,\n        \"samples\": [\n          19.6,\n          15.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"B\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 91.29486438415779,\n        \"min\": 0.32,\n        \"max\": 396.9,\n        \"num_unique_values\": 357,\n        \"samples\": [\n          396.24,\n          395.11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSTAT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.141061511348571,\n        \"min\": 1.73,\n        \"max\": 37.97,\n        \"num_unique_values\": 455,\n        \"samples\": [\n          6.15,\n          4.32\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MEDV\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9.19710408737982,\n        \"min\": 5.0,\n        \"max\": 50.0,\n        \"num_unique_values\": 229,\n        \"samples\": [\n          14.1,\n          22.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":42}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import numpy as np\n","boston = df_data\n","boston.keys()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QK9OpXOzICxn","executionInfo":{"status":"ok","timestamp":1742953761335,"user_tz":-540,"elapsed":10,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"f14c0aff-ea53-4eb1-adc0-25409eb5208d"},"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX',\n","       'PTRATIO', 'B', 'LSTAT', 'MEDV'],\n","      dtype='object')"]},"metadata":{},"execution_count":44}]}]}