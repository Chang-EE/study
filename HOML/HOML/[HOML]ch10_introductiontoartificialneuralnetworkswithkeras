{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyMBmqnjjTCzJ/gDYxo/7SWO"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["import numpy as np\n","from sklearn.datasets import load_iris\n","from sklearn.linear_model import Perceptron\n","\n","iris = load_iris(as_frame=True)\n","X = iris.data[[\"petal length (cm)\", \"petal width (cm)\"]].values\n","y = (iris.target == 0)\n","\n","per_clf = Perceptron(random_state=42)\n","per_clf.fit(X, y)\n","\n","X_new = [[2, 0.5],[3,1]]\n","y_pred = per_clf.predict(X_new)\n","print(y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eeFyDQnPaiy4","executionInfo":{"status":"ok","timestamp":1741223230187,"user_tz":-540,"elapsed":3454,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"b4872edf-310b-459d-d323-5cbc68b44984"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["[ True False]\n"]}]},{"cell_type":"code","source":["from sklearn.datasets import fetch_california_housing\n","from sklearn.metrics import mean_squared_error\n","from sklearn.model_selection import train_test_split\n","from sklearn.neural_network import MLPRegressor\n","from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import StandardScaler\n","\n","housing = fetch_california_housing()\n","X_train_full, X_test, y_train_full, y_test = train_test_split(housing.data, housing.target, random_state=42)\n","X_train, X_valid, y_train, y_valid = train_test_split(X_train_full, y_train_full, random_state=42)\n","\n","mlp_reg = MLPRegressor(hidden_layer_sizes=[50,50,50], random_state=42)\n","pipeline = make_pipeline(StandardScaler(), mlp_reg)\n","pipeline.fit(X_train, y_train)\n","y_pred = pipeline.predict(X_valid)\n","rmse = mean_squared_error(y_valid, y_pred)\n","\n","print(rmse)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"usfjIUspi78J","executionInfo":{"status":"ok","timestamp":1741223269606,"user_tz":-540,"elapsed":39417,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"f33ccb80-a461-4411-cdc4-3cb8dd0fe08e"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["0.25536110312131327\n"]}]},{"cell_type":"markdown","source":["#시퀀셜 API로 이미지 분류기 만들기"],"metadata":{"id":"l6pB6Hctn8Jf"}},{"cell_type":"code","source":["import tensorflow as tf\n","\n","fashion_mnist = tf.keras.datasets.fashion_mnist.load_data()\n","(X_train_full, y_train_full), (X_test, y_test) = fashion_mnist\n","X_train, y_train = X_train_full[:-5000], y_train_full[:-5000]\n","X_valid, y_valid = X_train_full[-5000:], y_train_full[-5000:]\n","\n","X_train, X_valid, X_test = X_train/255., X_valid/255., X_test/255. #스케일링\n","\n","class_names = [\"T-shirt/top\", \"Trouser\", \"Pullover\", \"Dress\", \"Coat\", \"Sandal\", \"Shirt\", \"Sneaker\", \"Bag\", \"Ankle boot\"]\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u0Ngefqzn_3B","executionInfo":{"status":"ok","timestamp":1741223275202,"user_tz":-540,"elapsed":5600,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"c6a3bb07-ce5a-498a-a510-6af588fa8bab"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz\n","\u001b[1m29515/29515\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz\n","\u001b[1m26421880/26421880\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz\n","\u001b[1m5148/5148\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n","Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz\n","\u001b[1m4422102/4422102\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n"]}]},{"cell_type":"code","source":["tf.random.set_seed(42)\n","model = tf.keras.Sequential()\n","model.add(tf.keras.layers.Input(shape=[28,28]))\n","model.add(tf.keras.layers.Flatten())\n","model.add(tf.keras.layers.Dense(300,activation=\"relu\"))\n","model.add(tf.keras.layers.Dense(100,activation=\"relu\"))\n","model.add(tf.keras.layers.Dense(10,activation=\"softmax\"))\n","\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":262},"id":"YMBxuIPzptT6","executionInfo":{"status":"ok","timestamp":1741223278318,"user_tz":-540,"elapsed":3108,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"a39f47c9-aeef-40b7-a0a1-3eebbd4f4c09"},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":["\u001b[1mModel: \"sequential\"\u001b[0m\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ flatten (\u001b[38;5;33mFlatten\u001b[0m)                    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m784\u001b[0m)                 │               \u001b[38;5;34m0\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense (\u001b[38;5;33mDense\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m300\u001b[0m)                 │         \u001b[38;5;34m235,500\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m100\u001b[0m)                 │          \u001b[38;5;34m30,100\u001b[0m │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_2 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)                  │           \u001b[38;5;34m1,010\u001b[0m │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n","┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n","┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n","│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)                    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">784</span>)                 │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">300</span>)                 │         <span style=\"color: #00af00; text-decoration-color: #00af00\">235,500</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>)                 │          <span style=\"color: #00af00; text-decoration-color: #00af00\">30,100</span> │\n","├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n","│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">1,010</span> │\n","└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Total params: \u001b[0m\u001b[38;5;34m266,610\u001b[0m (1.02 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">266,610</span> (1.02 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m266,610\u001b[0m (1.02 MB)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">266,610</span> (1.02 MB)\n","</pre>\n"]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"],"text/html":["<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n","</pre>\n"]},"metadata":{}}]},{"cell_type":"code","source":["model.compile(loss=\"sparse_categorical_crossentropy\",\n","              optimizer=\"sgd\",\n","              metrics=[\"accuracy\"])\n","history = model.fit(X_train, y_train, epochs=30, validation_data=(X_valid, y_valid))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cDhzLO2_rH9x","executionInfo":{"status":"ok","timestamp":1741223433608,"user_tz":-540,"elapsed":155287,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"6b473e9b-adbf-4306-c952-4736737e10ce"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - accuracy: 0.6817 - loss: 1.0063 - val_accuracy: 0.8288 - val_loss: 0.5051\n","Epoch 2/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 3ms/step - accuracy: 0.8267 - loss: 0.5075 - val_accuracy: 0.8416 - val_loss: 0.4511\n","Epoch 3/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - accuracy: 0.8439 - loss: 0.4524 - val_accuracy: 0.8458 - val_loss: 0.4279\n","Epoch 4/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - accuracy: 0.8537 - loss: 0.4218 - val_accuracy: 0.8524 - val_loss: 0.4132\n","Epoch 5/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - accuracy: 0.8610 - loss: 0.3999 - val_accuracy: 0.8556 - val_loss: 0.4039\n","Epoch 6/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - accuracy: 0.8661 - loss: 0.3827 - val_accuracy: 0.8580 - val_loss: 0.3962\n","Epoch 7/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 3ms/step - accuracy: 0.8708 - loss: 0.3683 - val_accuracy: 0.8598 - val_loss: 0.3900\n","Epoch 8/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - accuracy: 0.8753 - loss: 0.3561 - val_accuracy: 0.8610 - val_loss: 0.3826\n","Epoch 9/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 4ms/step - accuracy: 0.8790 - loss: 0.3452 - val_accuracy: 0.8646 - val_loss: 0.3767\n","Epoch 10/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 2ms/step - accuracy: 0.8823 - loss: 0.3355 - val_accuracy: 0.8668 - val_loss: 0.3711\n","Epoch 11/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - accuracy: 0.8843 - loss: 0.3266 - val_accuracy: 0.8690 - val_loss: 0.3660\n","Epoch 12/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - accuracy: 0.8876 - loss: 0.3182 - val_accuracy: 0.8688 - val_loss: 0.3634\n","Epoch 13/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - accuracy: 0.8904 - loss: 0.3106 - val_accuracy: 0.8690 - val_loss: 0.3610\n","Epoch 14/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - accuracy: 0.8925 - loss: 0.3033 - val_accuracy: 0.8728 - val_loss: 0.3573\n","Epoch 15/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - accuracy: 0.8945 - loss: 0.2966 - val_accuracy: 0.8728 - val_loss: 0.3558\n","Epoch 16/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.8971 - loss: 0.2903 - val_accuracy: 0.8722 - val_loss: 0.3535\n","Epoch 17/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - accuracy: 0.8984 - loss: 0.2844 - val_accuracy: 0.8718 - val_loss: 0.3504\n","Epoch 18/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - accuracy: 0.9013 - loss: 0.2786 - val_accuracy: 0.8724 - val_loss: 0.3510\n","Epoch 19/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - accuracy: 0.9037 - loss: 0.2730 - val_accuracy: 0.8730 - val_loss: 0.3494\n","Epoch 20/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - accuracy: 0.9060 - loss: 0.2681 - val_accuracy: 0.8738 - val_loss: 0.3466\n","Epoch 21/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - accuracy: 0.9076 - loss: 0.2627 - val_accuracy: 0.8734 - val_loss: 0.3471\n","Epoch 22/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - accuracy: 0.9093 - loss: 0.2581 - val_accuracy: 0.8746 - val_loss: 0.3445\n","Epoch 23/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - accuracy: 0.9109 - loss: 0.2531 - val_accuracy: 0.8738 - val_loss: 0.3457\n","Epoch 24/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9122 - loss: 0.2487 - val_accuracy: 0.8728 - val_loss: 0.3479\n","Epoch 25/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - accuracy: 0.9139 - loss: 0.2439 - val_accuracy: 0.8740 - val_loss: 0.3469\n","Epoch 26/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - accuracy: 0.9159 - loss: 0.2395 - val_accuracy: 0.8740 - val_loss: 0.3479\n","Epoch 27/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - accuracy: 0.9173 - loss: 0.2352 - val_accuracy: 0.8748 - val_loss: 0.3504\n","Epoch 28/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - accuracy: 0.9188 - loss: 0.2313 - val_accuracy: 0.8740 - val_loss: 0.3471\n","Epoch 29/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - accuracy: 0.9210 - loss: 0.2273 - val_accuracy: 0.8744 - val_loss: 0.3480\n","Epoch 30/30\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - accuracy: 0.9221 - loss: 0.2230 - val_accuracy: 0.8760 - val_loss: 0.3474\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import pandas as pd\n","\n","pd.DataFrame(history.history).plot(figsize=(8,5),\n","                                   xlim=[0,29],\n","                                   ylim=[0,1],\n","                                   grid=True,\n","                                   xlabel=\"epoch\",\n","                                   style=[\"r--\", \"r--.\", \"b-\", \"b-*\"])\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":470},"id":"UKpWPCAasjqV","executionInfo":{"status":"ok","timestamp":1741223434039,"user_tz":-540,"elapsed":427,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"19eb4ec7-3244-4a69-f14a-484e5aa4e8b1"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import numpy as np\n","\n","X_new = X_test[:3]\n","y_proba = model.predict(X_new)\n","print(y_proba.round(2))\n","\n","y_pred = y_proba.argmax(axis=-1)\n","print(np.array(class_names)[y_pred])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z399mETTtwe-","executionInfo":{"status":"ok","timestamp":1741223434748,"user_tz":-540,"elapsed":696,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"38edfd1d-bb1c-4c0c-9ce8-b342d77c57ff"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 328ms/step\n","[[0.   0.   0.   0.   0.   0.16 0.   0.01 0.   0.82]\n"," [0.   0.   1.   0.   0.   0.   0.   0.   0.   0.  ]\n"," [0.   1.   0.   0.   0.   0.   0.   0.   0.   0.  ]]\n","['Ankle boot' 'Pullover' 'Trouser']\n"]}]},{"cell_type":"markdown","source":["#시퀀셜 API로 회귀용 다층 퍼셉트론 만들기"],"metadata":{"id":"YBjg0qOkuual"}},{"cell_type":"code","source":["tf.random.set_seed(42)\n","norm_layer = tf.keras.layers.Normalization(input_shape=X_train.shape[1:])\n","model = tf.keras.Sequential([norm_layer,\n","                             tf.keras.layers.Dense(50,activation=\"relu\"),\n","                             tf.keras.layers.Dense(50,activation=\"relu\"),\n","                             tf.keras.layers.Dense(50,activation=\"relu\"),\n","                             tf.keras.layers.Dense(1),])\n","optimizer = tf.keras.optimizers.Adam(learning_rate=1e-3)\n","model.compile(loss='mse',\n","              optimizer=optimizer,\n","              metrics=[\"RootMeanSquaredError\"])\n","norm_layer.adapt(X_train)\n","history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))\n","mse_test, rmse_test = model.evaluate(X_test, y_test)\n","X_new = X_test[:3]\n","y_pred = model.predict(X_new)\n","print(y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1Nz-SY1fuyN2","executionInfo":{"status":"ok","timestamp":1741223548322,"user_tz":-540,"elapsed":113552,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"4207bb99-d9a1-4946-e770-3a3d9c0a7265"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/preprocessing/tf_data_layer.py:19: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(**kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - RootMeanSquaredError: 3.0359 - loss: 9.2759 - val_RootMeanSquaredError: 2.9020 - val_loss: 8.4214\n","Epoch 2/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8838 - loss: 8.3164 - val_RootMeanSquaredError: 2.8989 - val_loss: 8.4034\n","Epoch 3/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8791 - loss: 8.2890 - val_RootMeanSquaredError: 2.9000 - val_loss: 8.4098\n","Epoch 4/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - RootMeanSquaredError: 2.8773 - loss: 8.2788 - val_RootMeanSquaredError: 2.8987 - val_loss: 8.4023\n","Epoch 5/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8760 - loss: 8.2715 - val_RootMeanSquaredError: 2.8965 - val_loss: 8.3898\n","Epoch 6/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - RootMeanSquaredError: 2.8752 - loss: 8.2666 - val_RootMeanSquaredError: 2.8948 - val_loss: 8.3796\n","Epoch 7/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8744 - loss: 8.2623 - val_RootMeanSquaredError: 2.8930 - val_loss: 8.3694\n","Epoch 8/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8735 - loss: 8.2573 - val_RootMeanSquaredError: 2.8924 - val_loss: 8.3662\n","Epoch 9/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8729 - loss: 8.2533 - val_RootMeanSquaredError: 2.8926 - val_loss: 8.3670\n","Epoch 10/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8723 - loss: 8.2500 - val_RootMeanSquaredError: 2.8928 - val_loss: 8.3683\n","Epoch 11/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8720 - loss: 8.2482 - val_RootMeanSquaredError: 2.8930 - val_loss: 8.3696\n","Epoch 12/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8717 - loss: 8.2467 - val_RootMeanSquaredError: 2.8931 - val_loss: 8.3700\n","Epoch 13/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - RootMeanSquaredError: 2.8715 - loss: 8.2458 - val_RootMeanSquaredError: 2.8932 - val_loss: 8.3704\n","Epoch 14/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8714 - loss: 8.2448 - val_RootMeanSquaredError: 2.8932 - val_loss: 8.3705\n","Epoch 15/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - RootMeanSquaredError: 2.8713 - loss: 8.2443 - val_RootMeanSquaredError: 2.8932 - val_loss: 8.3707\n","Epoch 16/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8712 - loss: 8.2437 - val_RootMeanSquaredError: 2.8932 - val_loss: 8.3709\n","Epoch 17/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - RootMeanSquaredError: 2.8711 - loss: 8.2432 - val_RootMeanSquaredError: 2.8932 - val_loss: 8.3707\n","Epoch 18/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8710 - loss: 8.2428 - val_RootMeanSquaredError: 2.8932 - val_loss: 8.3707\n","Epoch 19/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8710 - loss: 8.2426 - val_RootMeanSquaredError: 2.8932 - val_loss: 8.3708\n","Epoch 20/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8709 - loss: 8.2423 - val_RootMeanSquaredError: 2.8932 - val_loss: 8.3708\n","\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8625 - loss: 8.1943\n","\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 279ms/step\n","[[[4.442784 ]\n","  [4.442784 ]\n","  [4.442784 ]\n","  [4.442784 ]\n","  [4.442784 ]\n","  [4.442784 ]\n","  [4.442784 ]\n","  [4.448259 ]\n","  [4.4427896]\n","  [4.447778 ]\n","  [4.471703 ]\n","  [4.471836 ]\n","  [4.4755406]\n","  [4.476918 ]\n","  [4.4861536]\n","  [4.486632 ]\n","  [4.483641 ]\n","  [4.4789724]\n","  [4.4834414]\n","  [4.4867115]\n","  [4.4923296]\n","  [4.4592576]\n","  [4.442784 ]\n","  [4.442784 ]\n","  [4.442784 ]\n","  [4.442784 ]\n","  [4.442784 ]\n","  [4.442784 ]]\n","\n"," [[4.4266973]\n","  [4.338488 ]\n","  [4.354323 ]\n","  [4.3732443]\n","  [4.370632 ]\n","  [4.346031 ]\n","  [4.354816 ]\n","  [4.376235 ]\n","  [4.34991  ]\n","  [4.3563595]\n","  [4.414851 ]\n","  [4.3967304]\n","  [4.380745 ]\n","  [4.393314 ]\n","  [4.400078 ]\n","  [4.401057 ]\n","  [4.399746 ]\n","  [4.397124 ]\n","  [4.393383 ]\n","  [4.389926 ]\n","  [4.3874397]\n","  [4.3868146]\n","  [4.3868284]\n","  [4.374862 ]\n","  [4.3837123]\n","  [4.3511825]\n","  [4.3501034]\n","  [4.376364 ]]\n","\n"," [[4.379306 ]\n","  [4.3437166]\n","  [4.347489 ]\n","  [4.34547  ]\n","  [4.34695  ]\n","  [4.3475633]\n","  [4.3479104]\n","  [4.348458 ]\n","  [4.3354383]\n","  [4.3278356]\n","  [4.3181314]\n","  [4.310613 ]\n","  [4.314185 ]\n","  [4.326386 ]\n","  [4.336163 ]\n","  [4.3392744]\n","  [4.345723 ]\n","  [4.338041 ]\n","  [4.3327785]\n","  [4.325341 ]\n","  [4.3305   ]\n","  [4.3340774]\n","  [4.335848 ]\n","  [4.3339787]\n","  [4.328407 ]\n","  [4.3272095]\n","  [4.316909 ]\n","  [4.3843803]]]\n"]}]},{"cell_type":"markdown","source":["#함수형 API로 복잡한 모델 만들기"],"metadata":{"id":"TSDOAEkvx1NJ"}},{"cell_type":"code","source":["normalization_layer = tf.keras.layers.Normalization()\n","hidden_layer1 = tf.keras.layers.Dense(30,activation='relu')\n","hidden_layer2 = tf.keras.layers.Dense(30,activation='relu')\n","concat_layer = tf.keras.layers.Concatenate()\n","output_layer = tf.keras.layers.Dense(1)\n","\n","input_ = tf.keras.layers.Input(shape=X_train.shape[1:])\n","normalized = normalization_layer(input_)\n","hidden1 = hidden_layer1(normalized)\n","hidden2 = hidden_layer2(hidden1)\n","concat = concat_layer([normalized, hidden2])\n","output = output_layer(concat)\n","\n","model = tf.keras.Model(inputs=[input_], outputs=[output])\n","\n","optimizer = tf.keras.optimizers.Adam(learning_rate=1e-3)\n","model.compile(loss='mse',\n","              optimizer=optimizer,\n","              metrics=[\"RootMeanSquaredError\"])\n","normalization_layer.adapt(X_train)\n","\n","history = model.fit(X_train, y_train, epochs=20, validation_data=(X_valid, y_valid))\n","mse_test, rmse_test = model.evaluate(X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2wVCYicBx6Ak","executionInfo":{"status":"ok","timestamp":1741223709011,"user_tz":-540,"elapsed":160669,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"486c93a9-22d1-4b78-c064-fb77d0f9f569"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/models/functional.py:237: UserWarning: The structure of `inputs` doesn't match the expected structure.\n","Expected: ['keras_tensor_17']\n","Received: inputs=Tensor(shape=(None, 28, 28))\n","  warnings.warn(msg)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 4ms/step - RootMeanSquaredError: 3.2965 - loss: 11.1056 - val_RootMeanSquaredError: 2.9124 - val_loss: 8.4821\n","Epoch 2/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 5ms/step - RootMeanSquaredError: 2.8886 - loss: 8.3442 - val_RootMeanSquaredError: 2.9007 - val_loss: 8.4141\n","Epoch 3/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8800 - loss: 8.2944 - val_RootMeanSquaredError: 2.8965 - val_loss: 8.3900\n","Epoch 4/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8770 - loss: 8.2769 - val_RootMeanSquaredError: 2.8951 - val_loss: 8.3816\n","Epoch 5/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 4ms/step - RootMeanSquaredError: 2.8757 - loss: 8.2697 - val_RootMeanSquaredError: 2.8943 - val_loss: 8.3769\n","Epoch 6/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8751 - loss: 8.2661 - val_RootMeanSquaredError: 2.8938 - val_loss: 8.3741\n","Epoch 7/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8746 - loss: 8.2636 - val_RootMeanSquaredError: 2.8935 - val_loss: 8.3724\n","Epoch 8/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8743 - loss: 8.2618 - val_RootMeanSquaredError: 2.8933 - val_loss: 8.3714\n","Epoch 9/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8741 - loss: 8.2604 - val_RootMeanSquaredError: 2.8932 - val_loss: 8.3708\n","Epoch 10/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8738 - loss: 8.2590 - val_RootMeanSquaredError: 2.8932 - val_loss: 8.3706\n","Epoch 11/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8736 - loss: 8.2576 - val_RootMeanSquaredError: 2.8932 - val_loss: 8.3706\n","Epoch 12/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8734 - loss: 8.2563 - val_RootMeanSquaredError: 2.8932 - val_loss: 8.3708\n","Epoch 13/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8732 - loss: 8.2553 - val_RootMeanSquaredError: 2.8933 - val_loss: 8.3710\n","Epoch 14/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 5ms/step - RootMeanSquaredError: 2.8731 - loss: 8.2545 - val_RootMeanSquaredError: 2.8933 - val_loss: 8.3712\n","Epoch 15/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8729 - loss: 8.2538 - val_RootMeanSquaredError: 2.8933 - val_loss: 8.3712\n","Epoch 16/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8728 - loss: 8.2533 - val_RootMeanSquaredError: 2.8933 - val_loss: 8.3712\n","Epoch 17/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8727 - loss: 8.2527 - val_RootMeanSquaredError: 2.8933 - val_loss: 8.3712\n","Epoch 18/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - RootMeanSquaredError: 2.8727 - loss: 8.2522 - val_RootMeanSquaredError: 2.8933 - val_loss: 8.3713\n","Epoch 19/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m14s\u001b[0m 5ms/step - RootMeanSquaredError: 2.8726 - loss: 8.2517 - val_RootMeanSquaredError: 2.8933 - val_loss: 8.3713\n","Epoch 20/20\n","\u001b[1m1719/1719\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 4ms/step - RootMeanSquaredError: 2.8725 - loss: 8.2513 - val_RootMeanSquaredError: 2.8933 - val_loss: 8.3711\n","\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 4ms/step - RootMeanSquaredError: 2.8627 - loss: 8.1955\n"]}]},{"cell_type":"code","source":["input_wide = tf.keras.layers.Input(shape=[5])\n","input_deep = tf.keras.layers.Input(shape=[6])\n","norm_layer_wide = tf.keras.layers.Normalization()\n","norm_layer_deep = tf.keras.layers.Normalization()\n","norm_wide = norm_layer_wide(input_wide)\n","norm_deep = norm_layer_wide(input_deep)\n","\n","hidden1 = tf.keras.layers.Dense(30,activation='relu')(norm_deep)\n","hidden2 = tf.keras.layers.Dense(30,activation='relu')(hidden1)\n","concat = tf.keras.layers.concatenate([norm_wide, hidden2])\n","output = tf.keras.layers.Dense(1)(concat)\n","model = tf.keras.Model(inputs=[input_wide, input_deep], outputs=[output])\n","\n","optimizer = tf.keras.optimizers.Adam(learning_rate=1e-3)\n","model.compile(loss=\"mse\",\n","              optimizer=optimizer,\n","              metrics=[\"RootMeanSquaredError\"])\n","\n","X_train_wide, X_train_deep = X_train[:,:5], X_train[:,2:]\n","X_valid_wide, X_valid_deep = X_valid[:,:5], X_valid[:,2:]\n","X_test_wide, X_test_deep = X_test[:,:5], X_test[:,2:]\n","X_new_wide, X_new_deep = X_test_wide[:3], X_test_deep[:3]\n","\n","norm_layer_wide.adapt(X_train_wide)\n","norm_layer_deep.adapt(X_train_deep)\n","\n","history = model.fit((X_train_wide, X_train_deep),\n","                    y_train,\n","                    epochs=20,\n","                    validation_data=((X_valid_wide, X_valid_deep),y_valid))\n","mse_test = model.evaluate((X_test_wide, X_test_deep), y_test)\n","y_pred = model.predict((X_new_wide, X_new_deep))\n","\n","print(y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":372},"id":"kQ8bPug-x-gT","executionInfo":{"status":"error","timestamp":1741224015007,"user_tz":-540,"elapsed":48,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"51cab297-01ed-42e1-97df-3f77e69366e1"},"execution_count":11,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Cannot convert '(-6,)' to a shape. Negative dimensions are not allowed.","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-c3b5962f2acf>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0minput_wide\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0minput_deep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mInput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mnorm_layer_wide\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mNormalization\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mnorm_layer_deep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mNormalization\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mnorm_wide\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnorm_layer_wide\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_wide\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/input_layer.py\u001b[0m in \u001b[0;36mInput\u001b[0;34m(shape, batch_size, dtype, sparse, batch_shape, name, tensor, optional)\u001b[0m\n\u001b[1;32m    189\u001b[0m     \u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;31m`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    190\u001b[0m     \"\"\"\n\u001b[0;32m--> 191\u001b[0;31m     layer = InputLayer(\n\u001b[0m\u001b[1;32m    192\u001b[0m         \u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    193\u001b[0m         \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/input_layer.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, shape, batch_size, dtype, sparse, batch_shape, input_tensor, optional, name, **kwargs)\u001b[0m\n\u001b[1;32m     90\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     91\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mshape\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 92\u001b[0;31m                 \u001b[0mshape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbackend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstandardize_shape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     93\u001b[0m                 \u001b[0mbatch_shape\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/backend/common/variables.py\u001b[0m in \u001b[0;36mstandardize_shape\u001b[0;34m(shape)\u001b[0m\n\u001b[1;32m    585\u001b[0m             )\n\u001b[1;32m    586\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0me\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 587\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    588\u001b[0m                 \u001b[0;34mf\"Cannot convert '{shape}' to a shape. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    589\u001b[0m                 \u001b[0;34m\"Negative dimensions are not allowed.\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Cannot convert '(-6,)' to a shape. Negative dimensions are not allowed."]}]},{"cell_type":"code","source":["input_wide = tf.keras.layers.Input(shape=[5])\n","input_deep = tf.keras.layers.Input(shape=[6])\n","norm_layer_wide = tf.keras.layers.Normalization()\n","norm_layer_deep = tf.keras.layers.Normalization()\n","norm_wide = norm_layer_wide(input_wide)\n","norm_deep = norm_layer_wide(input_deep)\n","\n","hidden1 = tf.keras.layers.Dense(30,activation='relu')(norm_deep)\n","hidden2 = tf.keras.layers.Dense(30,activation='relu')(hidden1)\n","concat = tf.keras.layers.concatenate([norm_wide, hidden2])\n","\n","output = tf.keras.layers.Dense(1)(concat)\n","aux_output = tf.keras.layers.Dense(1)(hidden2)\n","model = tf.keras.Model(inputs=[input_wide, input_deep],\n","                       outputs=[output, aux_output])\n","\n","optimizer = tf.keras.optimizers.Adam(learning_rate=1e-3)\n","model.compile(loss=(\"mse\",\"mse\"),\n","              losee_weights=(0.9, 0.1),\n","              optimizer=optimizer,\n","              metrics=[\"RootMeanSquaredError\"])\n","\n","norm_layer_wide.adapt(X_train_wide)\n","norm_layer_deep.adapt(X_train_deep)\n","\n","history = model.fit((X_train_wide, X_train_deep),\n","                    y_train,\n","                    epochs=20,\n","                    validation_data=((X_valid_wide, X_valid_deep),y_valid))\n","eval_results = model.evaluate((X_test_wide, X_test_deep), (y_test,y_test)\n"],"metadata":{"id":"rVBBZLulAx4u"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["@keras.saving.register_keras_serializable()\n","class WideAndDeepModel(tf.keras.Model):\n","  def __init__(self, units=30, activation='relu', **kwargs):\n","    super().__init__(**kwargs)\n","    self.norm_layer_wide = tf.keras.layers.Normalization()\n","    self.norm_layer_deep = tf.keras.layers.Normalization()\n","    self.hidden1 = tf.keras.layers.Dense(units, activation=activation)\n","    self.hidden2 = tf.keras.layers.Dense(units, activation=activation)\n","    self.main_output = tf.keras.layers.Dense(1)\n","    self.aux_output = tf.keras.layers.Dense(1)\n","\n","  def call(self, inputs):\n","    input_wide, input_deep = inputs\n","    norm_wide = self.norm_layer_wide(input_wide)\n","    norm_deep = self.norm_layer_deep(input_deep)\n","    hidden1 = self.hidden1(norm_deep)\n","    hidden2 = self.hidden2(hidden1)\n","    concat = tf.keras.layers.concatenate([norm_wide, hidden2])\n","    output = self.main_output(concat)\n","    aux_output = self.aux_output(hidden2)\n","    return output, aux_output\n","\n","model = WideAndDeepModel(30, activation='relu', name='my_model')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":220},"id":"cYrQXGK4DOuZ","executionInfo":{"status":"error","timestamp":1741225837083,"user_tz":-540,"elapsed":53,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"138d9460-ec95-49f4-a1de-818e95d438e4"},"execution_count":22,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'keras' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-22-fd41eb11152c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;34m@\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msaving\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mregister_keras_serializable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mWideAndDeepModel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mModel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0munits\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m30\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mactivation\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'relu'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnorm_layer_wide\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mNormalization\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'keras' is not defined"]}]},{"cell_type":"code","source":["model.save(\"my_model.keras\")\n","new_model = tf.keras.models.load_model('my_model.keras')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":335},"id":"WPhq3RVhH2wn","executionInfo":{"status":"error","timestamp":1741225725990,"user_tz":-540,"elapsed":80,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"29063ce9-12e3-4727-a778-1ad0ade0b1d6"},"execution_count":21,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"Could not locate class 'WideAndDeepModel'. Make sure custom classes are decorated with `@keras.saving.register_keras_serializable()`. Full object config: {'module': None, 'class_name': 'WideAndDeepModel', 'config': {'name': 'my_model', 'trainable': True, 'dtype': {'module': 'keras', 'class_name': 'DTypePolicy', 'config': {'name': 'float32'}, 'registered_name': None}}, 'registered_name': 'WideAndDeepModel'}","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-a4130629b42f>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"my_model.keras\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mnew_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeras\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmodels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mload_model\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'my_model.keras'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_api.py\u001b[0m in \u001b[0;36mload_model\u001b[0;34m(filepath, custom_objects, compile, safe_mode)\u001b[0m\n\u001b[1;32m    187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    188\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mis_keras_zip\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mis_keras_dir\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mis_hf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 189\u001b[0;31m         return saving_lib.load_model(\n\u001b[0m\u001b[1;32m    190\u001b[0m             \u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    191\u001b[0m             \u001b[0mcustom_objects\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcustom_objects\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_lib.py\u001b[0m in \u001b[0;36mload_model\u001b[0;34m(filepath, custom_objects, compile, safe_mode)\u001b[0m\n\u001b[1;32m    365\u001b[0m             )\n\u001b[1;32m    366\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 367\u001b[0;31m             return _load_model_from_fileobj(\n\u001b[0m\u001b[1;32m    368\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcustom_objects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msafe_mode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    369\u001b[0m             )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_lib.py\u001b[0m in \u001b[0;36m_load_model_from_fileobj\u001b[0;34m(fileobj, custom_objects, compile, safe_mode)\u001b[0m\n\u001b[1;32m    442\u001b[0m             \u001b[0mconfig_json\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    443\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 444\u001b[0;31m         model = _model_from_config(\n\u001b[0m\u001b[1;32m    445\u001b[0m             \u001b[0mconfig_json\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcustom_objects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcompile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msafe_mode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    446\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/saving/saving_lib.py\u001b[0m in \u001b[0;36m_model_from_config\u001b[0;34m(config_json, custom_objects, compile, safe_mode)\u001b[0m\n\u001b[1;32m    431\u001b[0m     \u001b[0;31m# Construct the model from the configuration file in the archive.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mObjectSharingScope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 433\u001b[0;31m         model = deserialize_keras_object(\n\u001b[0m\u001b[1;32m    434\u001b[0m             \u001b[0mconfig_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcustom_objects\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msafe_mode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msafe_mode\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    435\u001b[0m         )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/saving/serialization_lib.py\u001b[0m in \u001b[0;36mdeserialize_keras_object\u001b[0;34m(config, custom_objects, safe_mode, **kwargs)\u001b[0m\n\u001b[1;32m    692\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    693\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 694\u001b[0;31m     cls = _retrieve_class_or_fn(\n\u001b[0m\u001b[1;32m    695\u001b[0m         \u001b[0mclass_name\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    696\u001b[0m         \u001b[0mregistered_name\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/keras/src/saving/serialization_lib.py\u001b[0m in \u001b[0;36m_retrieve_class_or_fn\u001b[0;34m(name, registered_name, module, obj_type, full_config, custom_objects)\u001b[0m\n\u001b[1;32m    801\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    802\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 803\u001b[0;31m     raise TypeError(\n\u001b[0m\u001b[1;32m    804\u001b[0m         \u001b[0;34mf\"Could not locate {obj_type} '{name}'. \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    805\u001b[0m         \u001b[0;34m\"Make sure custom classes are decorated with \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: Could not locate class 'WideAndDeepModel'. Make sure custom classes are decorated with `@keras.saving.register_keras_serializable()`. Full object config: {'module': None, 'class_name': 'WideAndDeepModel', 'config': {'name': 'my_model', 'trainable': True, 'dtype': {'module': 'keras', 'class_name': 'DTypePolicy', 'config': {'name': 'float32'}, 'registered_name': None}}, 'registered_name': 'WideAndDeepModel'}"]}]},{"cell_type":"markdown","source":["#신경망 하이퍼파라미터 튜닝하기"],"metadata":{"id":"QSYNN5F9LUxt"}},{"cell_type":"code","source":["%pip install -q -U keras-tuner\n","\n","import keras_tuner as kt"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9jZHelGmLUZ4","executionInfo":{"status":"ok","timestamp":1741226396905,"user_tz":-540,"elapsed":3288,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"05253abc-6888-4284-df82-ff1f08841774"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/129.1 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m129.1/129.1 kB\u001b[0m \u001b[31m5.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}]},{"cell_type":"code","source":["import keras_tuner as kt\n","\n","def build_model(hp):\n","  n_hidden = hp.Int(\"n_hidden\", min_value=0, max_value=8, default=2)\n","  n_neurons = hp.Int(\"n_neurons\", min_value=16, max_value=256)\n","  learning_rate = hp.Float(\"learning_rate\", min_value=1e-4, max_value=1e-2, sampling='log')\n","  optimizer = hp.Choice(\"optimizer\", values=[\"sgd\", \"adam\"])\n","  if optimizer == 'sgd':\n","    optimizer = tf.keras.optimizers.SGD(learning_rate=learning_rate)\n","  else:\n","    optimizer = tf.keras.optimizers.Adam(learing_rate=learning_rate)\n","\n","  model = tf.keras.Sequential()\n","  model.add(tf.keras.layers.Flatten())\n","  for _ in range(n_hidden):\n","    model.add(tf.keras.layers.Dense(n_neurons, activation='relu'))\n","  model.add(tf.keras.layers.Dense(10, activation='softmax'))\n","  model.compile(loss=\"sparse_categorical_crossentropy\",\n","                optimizer=optimizer,\n","                metrics=[\"accuracy\"])\n","  return model\n","\n","random_search_tuner = kt.RandomSearch(build_model,\n","                                      objective='val_accuracy',\n","                                      max_trials=5,\n","                                      overwrite=True,\n","                                      directory='my_fashion_mnist',\n","                                      project_name='my_rnd_search',\n","                                      seed=42)\n","\n","random_search_tuner.search(X_train, y_train, epochs=10, validation_data=(X_valid, y_valid))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"iNQquqLMLrMC","executionInfo":{"status":"ok","timestamp":1741227454223,"user_tz":-540,"elapsed":234838,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"8ef20be3-f40f-4474-a798-859bb62f7272"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Trial 5 Complete [00h 00m 54s]\n","val_accuracy: 0.7595999836921692\n","\n","Best val_accuracy So Far: 0.8532000184059143\n","Total elapsed time: 00h 03m 55s\n"]}]},{"cell_type":"code","source":["top3_models = random_search_tuner.get_best_models(num_models=3)\n","best_model = top3_models[0]\n","\n","top3_params = random_search_tuner.get_best_hyperparameters(num_trials=3)\n","print(top3_params[0].values)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3UDR44MPOQBT","executionInfo":{"status":"ok","timestamp":1741227550528,"user_tz":-540,"elapsed":1104,"user":{"displayName":"이창수","userId":"02759287954653446121"}},"outputId":"69f23984-d3b1-4108-c90d-e74cc03f9601"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["{'n_hidden': 8, 'n_neurons': 37, 'learning_rate': 0.008547485565344062, 'optimizer': 'sgd'}\n"]}]}]}